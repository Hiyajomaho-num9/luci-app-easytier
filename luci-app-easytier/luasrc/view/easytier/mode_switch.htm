<%
	local mode = luci.http.formvalue("cbi.opt.easytier.mode_switch") or "simple"
%>

<style type="text/css">
	.easytier-mode-switch {
		margin-bottom: 10px;
	}
	
	.easytier-mode-switch .cbi-value-title {
		font-weight: bold;
		color: #333;
	}
	
	.easytier-mode-switch #mode-btn {
		min-width: 120px;
		font-weight: bold;
		transition: all 0.3s ease;
	}
	
	.easytier-mode-switch .cbi-button-reset {
		background-color: #5cb85c;
		border-color: #4cae4c;
		color: white;
	}
	
	.easytier-mode-switch .cbi-button-reset:hover {
		background-color: #449d44;
		border-color: #398439;
	}
	
	.easytier-mode-switch .cbi-button-apply {
		background-color: #337ab7;
		border-color: #2e6da4;
		color: white;
	}
	
	.easytier-mode-switch .cbi-button-apply:hover {
		background-color: #286090;
		border-color: #204d74;
	}
	
	/* Hide elements with animation */
	.easytier-hidden {
		display: none !important;
		opacity: 0;
		transition: opacity 0.3s ease;
	}
	
	.easytier-visible {
		display: table-row !important;
		opacity: 1;
		transition: opacity 0.3s ease;
	}
</style>

<script type="text/javascript">
	var currentMode = localStorage.getItem('easytier_mode') || 'simple';
	
	function toggleMode() {
		if (currentMode === 'simple') {
			currentMode = 'advanced';
			localStorage.setItem('easytier_mode', 'advanced');
			document.getElementById('mode-btn').innerHTML = 'Advanced Mode';
			document.getElementById('mode-btn').className = 'cbi-button cbi-button-apply';
			showAdvancedElements();
		} else {
			currentMode = 'simple';
			localStorage.setItem('easytier_mode', 'simple');
			document.getElementById('mode-btn').innerHTML = 'Simple Mode';
			document.getElementById('mode-btn').className = 'cbi-button cbi-button-reset';
			hideAdvancedElements();
			setSimpleModeDefaults();
		}
	}
	
	function hideAdvancedElements() {
		// Hide Advanced Settings tab and its header
		hideTabAndHeader('privacy');
		
		// Hide Upload Program tab and its header
		hideTabAndHeader('upload');
		
		// Hide Self-hosted Web Server section
		var webSections = document.querySelectorAll('fieldset');
		webSections.forEach(function(section) {
			var legend = section.querySelector('legend');
			if (legend && (legend.textContent.includes('Self-hosted Web Server') || 
						   legend.textContent.includes('自托管Web服务器'))) {
				section.style.display = 'none';
			}
		});
		
		// Hide advanced elements in general tab by finding their containers
		hideAdvancedGeneralElements();
	}
	
	function showAdvancedElements() {
		// Show Advanced Settings tab and its header
		showTabAndHeader('privacy');
		
		// Show Upload Program tab and its header
		showTabAndHeader('upload');
		
		// Show Self-hosted Web Server section
		var webSections = document.querySelectorAll('fieldset');
		webSections.forEach(function(section) {
			var legend = section.querySelector('legend');
			if (legend && (legend.textContent.includes('Self-hosted Web Server') || 
						   legend.textContent.includes('自托管Web服务器'))) {
				section.style.display = 'block';
			}
		});
		
		// Show advanced elements in general tab
		showAdvancedGeneralElements();
	}
	
	function hideTabAndHeader(tabName) {
		// Hide tab content
		var tabContent = document.querySelector('[data-tab*=".' + tabName + '"]');
		if (tabContent) tabContent.style.display = 'none';
		
		// Hide tab header by searching through all tabs - try multiple approaches
		var tabSelectors = ['.cbi-tab', '.cbi-tab-table td', 'ul.cbi-tabmenu li', '.tabs li'];
		
		tabSelectors.forEach(function(selector) {
			var tabHeaders = document.querySelectorAll(selector);
			tabHeaders.forEach(function(header) {
				var tabDisplayName = getTabDisplayName(tabName);
				var headerText = header.textContent || header.innerText || '';
				
				if (headerText.includes(tabDisplayName.en) || 
					headerText.includes(tabDisplayName.cn) ||
					headerText.includes(tabDisplayName.key)) {
					header.style.display = 'none';
					
					// Also hide parent if it's a table cell or list item
					if (header.tagName === 'TD' || header.tagName === 'LI') {
						header.style.display = 'none';
					}
				}
			});
		});
	}
	
	function showTabAndHeader(tabName) {
		// Show tab content
		var tabContent = document.querySelector('[data-tab*=".' + tabName + '"]');
		if (tabContent) tabContent.style.display = 'block';
		
		// Show tab header
		var tabSelectors = ['.cbi-tab', '.cbi-tab-table td', 'ul.cbi-tabmenu li', '.tabs li'];
		
		tabSelectors.forEach(function(selector) {
			var tabHeaders = document.querySelectorAll(selector);
			tabHeaders.forEach(function(header) {
				var tabDisplayName = getTabDisplayName(tabName);
				var headerText = header.textContent || header.innerText || '';
				
				if (headerText.includes(tabDisplayName.en) || 
					headerText.includes(tabDisplayName.cn) ||
					headerText.includes(tabDisplayName.key)) {
					
					var displayStyle = 'block';
					if (header.tagName === 'TD') displayStyle = 'table-cell';
					if (header.tagName === 'LI') displayStyle = 'list-item';
					
					header.style.display = displayStyle;
				}
			});
		});
	}
	
	function getTabDisplayName(tabName) {
		switch(tabName) {
			case 'privacy': 
				return { en: 'Advanced Settings', cn: '高级设置', key: 'privacy' };
			case 'upload': 
				return { en: 'Upload Program', cn: '上传程序', key: 'upload' };
			default: 
				return { en: tabName, cn: tabName, key: tabName };
		}
	}
	
	function hideAdvancedGeneralElements() {
		// Elements to hide in simple mode (only keep enable, restart, network_name, network_secret, peeradd, desvice_name)
		var elementsToHide = [
			'etcmd', 'et_config', 'web_config', 'ip6addr', 'proxy_network',
			'listenermode', 'tcp_port', 'ws_port', 'wss_port', 'wg_port', 
			'quic_port', 'uuid', 'log'
		];
		
		elementsToHide.forEach(function(elementName) {
			hideElementBySelector(elementName);
		});
		
		// Handle IP address field based on DHCP status in simple mode
		handleIpAddrVisibility();
	}
	
	function handleIpAddrVisibility() {
		var dhcpCheckbox = document.querySelector('input[name*="ip_dhcp"]');
		if (dhcpCheckbox) {
			if (dhcpCheckbox.checked) {
				hideElementBySelector('ipaddr');
			} else {
				showElementBySelector('ipaddr');
			}
		}
	}
	
	function showAdvancedGeneralElements() {
		// Show all previously hidden elements
		var elementsToShow = [
			'etcmd', 'et_config', 'web_config', 'ip6addr', 'proxy_network',
			'listenermode', 'tcp_port', 'ws_port', 'wss_port', 'wg_port', 
			'quic_port', 'uuid', 'log', 'ipaddr'
		];
		
		elementsToShow.forEach(function(elementName) {
			showElementBySelector(elementName);
		});
	}
	
	function hideElementBySelector(elementName) {
		// Try multiple strategies to find the element
		var found = false;
		
		// Strategy 1: Find by name attribute containing elementName
		var nameElements = document.querySelectorAll('[name*="' + elementName + '"]');
		nameElements.forEach(function(element) {
			var container = element.closest('.cbi-value') || element.closest('tr') || element;
			if (container && container.style) {
				container.style.display = 'none';
				found = true;
			}
		});
		
		// Strategy 2: Find by searching labels containing translated text
		if (!found) {
			var labelMappings = {
				'etcmd': ['Startup Method', '启动方式'],
				'et_config': ['Configuration File', '配置文件'],
				'web_config': ['Web Server Address', 'Web服务器地址'],
				'ip6addr': ['Interface IPV6 Address', '接口IPV6地址'],
				'proxy_network': ['Subnet Proxy', '子网代理'],
				'listenermode': ['Listener Port', '监听端口'],
				'tcp_port': ['TCP/UDP Port', 'TCP/UDP端口'],
				'ws_port': ['WS Port', 'WS端口'],
				'wss_port': ['WSS Port', 'WSS端口'],
				'wg_port': ['WG Port', 'WG端口'],
				'quic_port': ['QUIC Port', 'QUIC端口'],
				'uuid': ['UUID', 'UUID'],
				'log': ['Program Log', '程序日志'],
				'ipaddr': ['Interface IP Address', '接口IP地址']
			};
			
			if (labelMappings[elementName]) {
				var labels = document.querySelectorAll('.cbi-value-title');
				labels.forEach(function(label) {
					labelMappings[elementName].forEach(function(text) {
						if (label.textContent.includes(text)) {
							var container = label.closest('.cbi-value') || label.closest('tr');
							if (container && container.style) {
								container.style.display = 'none';
								found = true;
							}
						}
					});
				});
			}
		}
	}
	
	function showElementBySelector(elementName) {
		// Strategy 1: Find by name attribute containing elementName
		var nameElements = document.querySelectorAll('[name*="' + elementName + '"]');
		nameElements.forEach(function(element) {
			var container = element.closest('.cbi-value') || element.closest('tr') || element;
			if (container && container.style) {
				container.style.display = 'table-row';
			}
		});
		
		// Strategy 2: Find by searching labels containing translated text
		var labelMappings = {
			'etcmd': ['Startup Method', '启动方式'],
			'et_config': ['Configuration File', '配置文件'],
			'web_config': ['Web Server Address', 'Web服务器地址'],
			'ip6addr': ['Interface IPV6 Address', '接口IPV6地址'],
			'proxy_network': ['Subnet Proxy', '子网代理'],
			'listenermode': ['Listener Port', '监听端口'],
			'tcp_port': ['TCP/UDP Port', 'TCP/UDP端口'],
			'ws_port': ['WS Port', 'WS端口'],
			'wss_port': ['WSS Port', 'WSS端口'],
			'wg_port': ['WG Port', 'WG端口'],
			'quic_port': ['QUIC Port', 'QUIC端口'],
			'uuid': ['UUID', 'UUID'],
			'log': ['Program Log', '程序日志'],
			'ipaddr': ['Interface IP Address', '接口IP地址']
		};
		
		if (labelMappings[elementName]) {
			var labels = document.querySelectorAll('.cbi-value-title');
			labels.forEach(function(label) {
				labelMappings[elementName].forEach(function(text) {
					if (label.textContent.includes(text)) {
						var container = label.closest('.cbi-value') || label.closest('tr');
						if (container && container.style) {
							container.style.display = 'table-row';
						}
					}
				});
			});
		}
	}
	
	function setSimpleModeDefaults() {
		// Force Startup Method to Default
		var startupMethod = document.querySelector('select[name*="etcmd"]');
		if (startupMethod) {
			startupMethod.value = 'etcmd';
			// Trigger change event to update dependencies
			var event = new Event('change', { bubbles: true });
			startupMethod.dispatchEvent(event);
		}
		
		// Force Enable DHCP to 1
		var dhcpCheckbox = document.querySelector('input[name*="ip_dhcp"]');
		if (dhcpCheckbox) {
			dhcpCheckbox.checked = true;
			// Trigger change event to update dependencies
			var event = new Event('change', { bubbles: true });
			dhcpCheckbox.dispatchEvent(event);
			
			// Hide IP address field when DHCP is enabled in simple mode
			setTimeout(function() {
				hideElementBySelector('ipaddr');
			}, 100);
		}
		
		// Add listener for DHCP checkbox changes in simple mode
		if (dhcpCheckbox) {
			dhcpCheckbox.addEventListener('change', function() {
				if (currentMode === 'simple') {
					if (this.checked) {
						hideElementBySelector('ipaddr');
					} else {
						showElementBySelector('ipaddr');
					}
				}
			});
		}
	}
	
	// Initialize on page load
	document.addEventListener('DOMContentLoaded', function() {
		initializeModeSwitch();
	});
	
	function initializeModeSwitch() {
		setTimeout(function() {
			var modeBtn = document.getElementById('mode-btn');
			if (modeBtn && !modeBtn.dataset.initialized) {
				modeBtn.dataset.initialized = 'true';
				
				if (currentMode === 'simple') {
					modeBtn.innerHTML = 'Simple Mode';
					modeBtn.className = 'cbi-button cbi-button-reset';
					hideAdvancedElements();
					setSimpleModeDefaults();
				} else {
					modeBtn.innerHTML = 'Advanced Mode';
					modeBtn.className = 'cbi-button cbi-button-apply';
					showAdvancedElements();
				}
			}
		}, 500);
	}
	
	// Also try to initialize when the page content changes
	var observer = new MutationObserver(function(mutations) {
		var modeBtn = document.getElementById('mode-btn');
		if (modeBtn && !modeBtn.dataset.initialized) {
			initializeModeSwitch();
		}
	});
	
	observer.observe(document.body, { childList: true, subtree: true });
	
	// Backup initialization method
	window.addEventListener('load', function() {
		initializeModeSwitch();
	});
</script>

<div class="cbi-value easytier-mode-switch">
	<label class="cbi-value-title"><%:Switch Mode%></label>
	<div class="cbi-value-field">
		<input type="button" class="cbi-button cbi-button-reset" id="mode-btn" 
			   value="Simple Mode" onclick="toggleMode()" />
		<div class="cbi-value-description"><%:Switch between Simple Mode and Advanced Mode%></div>
	</div>
</div>